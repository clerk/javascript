---
import type { HTMLTag, Polymorphic } from 'astro/types'
import type { SignUpProps } from "@clerk/types";
type Props<Tag extends HTMLTag = HTMLTag> = Polymorphic<SignUpProps & { as: Tag; mode?: 'redirect' | 'modal' }>

import { generateSafeId } from '@clerk/astro/internal';

const safeId = generateSafeId();

const {
  as: Tag = 'button',
  fallbackRedirectUrl,
  forceRedirectUrl,
  signInFallbackRedirectUrl,
  signInForceRedirectUrl,
  mode,
  unsafeMetadata,
  ...elementProps
} = Astro.props

const signUpOptions = {
  fallbackRedirectUrl,
  forceRedirectUrl,
  signInFallbackRedirectUrl,
  signInForceRedirectUrl,
  unsafeMetadata,
}
---

<Tag {...elementProps} data-clerk-unstyled-id={safeId}>
  <slot>Sign up</slot>
</Tag >

<script is:inline define:vars={{ signUpOptions, mode, safeId }}>
  const btn = document.querySelector(`[data-clerk-unstyled-id="${safeId}"]`);

  btn.addEventListener("click", () => {
    const clerk = window.Clerk

    if (mode === 'modal') {
      return clerk.openSignUp(signUpOptions);
    }

    return clerk.redirectToSignUp({
      ...signUpOptions,
      signUpFallbackRedirectUrl: signUpOptions.fallbackRedirectUrl,
      signUpForceRedirectUrl: signUpOptions.forceRedirectUrl,
    });
  });
</script>
