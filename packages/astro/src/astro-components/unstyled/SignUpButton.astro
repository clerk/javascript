---
import type { HTMLTag, Polymorphic } from 'astro/types'
import type { SignUpProps } from '@clerk/types'
import { addUnstyledAttributeToFirstTag } from './utils'

type Props<Tag extends HTMLTag = 'button'> = Polymorphic<SignUpProps & {
  /**
   * @deprecated The 'as' prop is deprecated and will be removed in a future version.
   * Use the default slot with the 'asChild' prop instead.
   * @example
   * <SignInButton asChild>
   *   <button>Sign in</button>
   * </SignInButton>
   */
  as: Tag;
  asChild?: boolean;
  mode?: 'redirect' | 'modal'
}>

import { generateSafeId } from '@clerk/astro/internal';

const safeId = generateSafeId();

const {
  as: Tag = 'button',
  asChild,
  fallbackRedirectUrl,
  forceRedirectUrl,
  signInFallbackRedirectUrl,
  signInForceRedirectUrl,
  mode,
  unsafeMetadata,
  ...elementProps
} = Astro.props

const signUpOptions = {
  fallbackRedirectUrl,
  forceRedirectUrl,
  signInFallbackRedirectUrl,
  signInForceRedirectUrl,
  unsafeMetadata,
}

let htmlElement = ''

if (asChild) {
  htmlElement = await Astro.slots.render('default')
  htmlElement = addUnstyledAttributeToFirstTag(htmlElement, safeId)
}
---

{
  asChild ? (
    <Fragment set:html={htmlElement} />
  ) : (
    <Tag {...elementProps} data-clerk-unstyled-id={safeId}>
      <slot>Sign up</slot>
    </Tag >
  )
}

<script is:inline define:vars={{ signUpOptions, mode, safeId }}>
  const btn = document.querySelector(`[data-clerk-unstyled-id="${safeId}"]`);

  btn.addEventListener("click", () => {
    const clerk = window.Clerk

    if (mode === 'modal') {
      return clerk.openSignUp(signUpOptions);
    }

    return clerk.redirectToSignUp({
      ...signUpOptions,
      signUpFallbackRedirectUrl: signUpOptions.fallbackRedirectUrl,
      signUpForceRedirectUrl: signUpOptions.forceRedirectUrl,
    });
  });
</script>
