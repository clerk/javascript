---
import type { HTMLTag, Polymorphic } from 'astro/types'
import type { SignInProps } from "@clerk/types";
type Props<Tag extends HTMLTag> = Polymorphic<SignInProps & { as: Tag; id?: string; mode?: 'redirect' | 'modal' }>

import { customAlphabet, urlAlphabet } from "nanoid";

const safeId = customAlphabet(urlAlphabet, 10)();

const {
  as: Tag = 'button',
  id = safeId,
  forceRedirectUrl,
  fallbackRedirectUrl,
  signUpFallbackRedirectUrl,
  signUpForceRedirectUrl,
  mode,
  ...elementProps
} = Astro.props

const signInOptions = {
  forceRedirectUrl,
  fallbackRedirectUrl,
  signUpFallbackRedirectUrl,
  signUpForceRedirectUrl,
};
---

<Tag {...elementProps} id={id}>
  <slot>Sign in</slot>
</Tag >

<script is:inline define:vars={{ signInOptions, mode, safeId }}>
  const btn = document.querySelector(`#${safeId}`);

  btn.addEventListener("click", () => {
    const clerk = window.Clerk

    if (mode === 'modal') {
      return clerk.openSignIn(signInOptions);
    }

    return clerk.redirectToSignIn({
      ...signInOptions,
      signInFallbackRedirectUrl: signInOptions.fallbackRedirectUrl,
      signInForceRedirectUrl: signInOptions.forceRedirectUrl,
    });
  });
</script>
