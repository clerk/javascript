---
import type { HTMLTag, Polymorphic } from 'astro/types';
import type { __experimental_PlanDetailsButtonProps } from '@clerk/types';
import type { ButtonProps } from '../../types';
import { addUnstyledAttributeToFirstTag, logAsPropUsageDeprecation } from './utils';

type Props<Tag extends HTMLTag = 'button'> = Polymorphic<ButtonProps<Tag>> & __experimental_PlanDetailsButtonProps;

import { generateSafeId } from '@clerk/astro/internal';

const safeId = generateSafeId();

if ('as' in Astro.props) {
  logAsPropUsageDeprecation();
}

const { as: Tag = 'button', asChild, plan, planId, initialPlanPeriod, planDetailsProps, ...props } = Astro.props;

const planDetailsOptions = {
  plan,
  planId,
  initialPlanPeriod,
  ...planDetailsProps,
};

let htmlElement = '';

if (asChild) {
  htmlElement = await Astro.slots.render('default');
  htmlElement = addUnstyledAttributeToFirstTag(htmlElement, safeId);
}
---

{
  asChild ? (
    <Fragment set:html={htmlElement} />
  ) : (
    <Tag
      {...props}
      data-clerk-unstyled-id={safeId}
    >
      <slot>Plan details</slot>
    </Tag>
  )
}

<script is:inline define:vars={{ props, planDetailsOptions, safeId }}>
  const btn = document.querySelector(`[data-clerk-unstyled-id="${safeId}"]`);

  btn.addEventListener('click', () => {
    const clerk = window.Clerk;

    return clerk.__internal_openPlanDetails(planDetailsOptions);
  });
</script>
