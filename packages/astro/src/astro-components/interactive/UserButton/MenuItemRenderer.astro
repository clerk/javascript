---
type Props = {
  label: string
  href?: string
  open?: string
  clickIdentifier?: string
}

const { label, href, open, clickIdentifier } = Astro.props

let labelIcon = '';
const hasLabelIcon = Astro.slots.has('label-icon');

if (hasLabelIcon) {
  labelIcon = await Astro.slots.render('label-icon');
}

const isDevMode = import.meta.env.DEV;
---

<script is:inline define:vars={{ label, href, open, clickIdentifier, labelIcon, hasLabelIcon, isDevMode }}>
const isParentExists = document.querySelector('[data-clerk-user-button-menu-items]');

// There's no current way to get the parent element of the current component in Astro.
// We used a web component in the parent with a data attribute that we can query here.
if (!isParentExists) {
  if (isDevMode) {
    throw new Error(
      `Clerk: <UserButton.MenuItems /> component can only accept <UserButton.Action /> and <UserButton.Link /> as its children. Any other provided component will be ignored.`
    );
  }
  return
}

// Get the user button map from window that we set in the `<InternalUIComponentRenderer />`.
const userButtonComponentMap = window.__astro_clerk_component_props.get('user-button');
// It doesn't make sense to have multiple user buttons in page, so first one should be safe.
const userButton = document.querySelector('[data-clerk-id^="clerk-user-button"]');

const safeId = userButton.getAttribute('data-clerk-id');
const currentOptions = userButtonComponentMap.get(safeId);

const reorderItemsLabels = ['manageAccount', 'signOut'];
const isReorderItem = !hasLabelIcon && reorderItemsLabels.includes(label);

let newMenuItem = {
  label,
}

if (!isReorderItem) {
  newMenuItem = {
    ...newMenuItem,
    mountIcon: (el) => {
      el.innerHTML = labelIcon
    },
    unmountIcon: () => { /* What to clean up? */}
  }
}

if (href) {
  newMenuItem.href = href;
}

if (open) {
  newMenuItem.open = open.startsWith('/') ? open : `/${open}`;
}

if (clickIdentifier) {
  const clickEvent = new CustomEvent('clerkUserButtonItemClick', { detail: clickIdentifier });
  newMenuItem.onClick = () => {
    document.dispatchEvent(clickEvent);
  }
}

userButtonComponentMap.set(safeId, {
  ...currentOptions,
  customMenuItems: [
    ...(currentOptions?.customMenuItems ?? []),
    newMenuItem,
  ]
})
</script>
