---
import type { CustomMenuItem } from '@clerk/types'

type Props = Pick<CustomMenuItem, 'label' | 'href' | 'open'>

const { label, href, open } = Astro.props

let labelIcon = '';
const hasLabelIcon = Astro.slots.has('label-icon');

if (hasLabelIcon) {
  labelIcon = await Astro.slots.render('label-icon');
}
---

<script is:inline define:vars={{ label, href, open, labelIcon, hasLabelIcon }}>
// Get the user button map from window that we set in the `<InternalUIComponentRenderer />`.
const userButtonComponentMap = window.__astro_clerk_component_props.get('user-button');
// It doesn't make sense to have multiple user buttons in page, so first one should be safe.
const userButton = document.querySelector('[data-clerk-id^="clerk-user-button"]');

const safeId = userButton.getAttribute('data-clerk-id');
const currentOptions = userButtonComponentMap.get(safeId);

const reorderItemsLabels = ['manageAccount', 'signOut'];
function isReorderItem() {
  return !hasLabelIcon && reorderItemsLabels.includes(label);
}

let newMenuItem = {
  label,
}

if (!isReorderItem()) {
  newMenuItem = {
    ...newMenuItem,
    mountIcon: (el) => {
      el.innerHTML = labelIcon
    },
    unmountIcon: () => { /* What to clean up? */}
  }
}

if (href) {
  newMenuItem.href = href;
}

if (open) {
  newMenuItem.open = open.startsWith('/') ? open : `/${open}`;
}

userButtonComponentMap.set(safeId, {
  ...currentOptions,
  customMenuItems: [
    ...(currentOptions?.customMenuItems ?? []),
    newMenuItem,
  ]
})
</script>
