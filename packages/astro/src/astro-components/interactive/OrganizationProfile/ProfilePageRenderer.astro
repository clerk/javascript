---
interface Props {
  url: string
  label: string
  type: 'page' | 'link'
}

const { url, label, type } = Astro.props

let labelIcon = '';
let content = ''

if (Astro.slots.has('label-icon')) {
  labelIcon = await Astro.slots.render('label-icon');
}

if (Astro.slots.has('default') && type === 'page') {
  content = await Astro.slots.render('default');
}
---

<script is:inline define:vars={{ url, label, content, labelIcon, type }}>
// Get the organization profile map from window that we set in the `<InternalUIComponentRenderer />`.
const organizationProfileComponentMap = window.__astro_clerk_component_props.get('organization-profile');

const organizationProfile = document.querySelector('[data-clerk-id^="clerk-organization-profile"]');

const safeId = organizationProfile.getAttribute('data-clerk-id');
const currentOptions = organizationProfileComponentMap.get(safeId);

const reorderItemsLabels = ['general', 'members'];
const isReorderItem = reorderItemsLabels.includes(label);

let newCustomPage = { label }

if (!isReorderItem) {
  newCustomPage = {
    ...newCustomPage,
    url,
    mountIcon: (el) => { el.innerHTML = labelIcon },
    unmountIcon: () => { /* Implement cleanup if needed */ }
  }

  if (type === 'page') {
    newCustomPage = {
      ...newCustomPage,
      mount: (el) => { el.innerHTML = content },
      unmount: () => { /* Implement cleanup if needed */ }
    }
  }
}

organizationProfileComponentMap.set(safeId, {
  ...currentOptions,
  customPages: [
    ...(currentOptions?.customPages ?? []),
    newCustomPage,
  ]
})
</script>
