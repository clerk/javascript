---
import type { ProtectProps } from '../../types';

type Props = Omit<ProtectProps, 'condition'>;

const { role, permission } = Astro.props;
---

<clerk-protect
  data-role={role}
  data-permission={permission}
>
  <div data-clerk-control-slot-default>
    <slot />
  </div>
  <div data-clerk-control-slot-fallback>
    <slot name="fallback" />
  </div>
</clerk-protect>

<script>
import { $authStore, $sessionStore } from '@clerk/astro/client';
import type { CheckAuthorization } from '@clerk/types';

class ClerkProtect extends HTMLElement {
  private defaultSlot: HTMLDivElement | null = null;
  private fallbackSlot: HTMLDivElement | null = null;
  private authStoreListener: (() => void) | null = null;

  constructor() {
    super();
  }

  connectedCallback() {
    this.toggleContentVisibility();
  }

  disconnectedCallback() {
    this.authStoreListener?.();
  }

  toggleContentVisibility() {
    this.defaultSlot = this.querySelector('[data-clerk-control-slot-default]');
    this.fallbackSlot = this.querySelector('[data-clerk-control-slot-fallback]');

    this.authStoreListener = $authStore.subscribe(state => {
      const has = $sessionStore.get()?.checkAuthorization;

      const role = this.dataset.role;
      const permission = this.dataset.permission;
      const isUnauthorized =
        !state.userId || ((role || permission) && !has?.({ role, permission } as Parameters<CheckAuthorization>[0]));

      if (this.defaultSlot) {
        isUnauthorized ? this.defaultSlot.setAttribute('hidden', '') : this.defaultSlot.removeAttribute('hidden');
      }

      if (this.fallbackSlot) {
        isUnauthorized ? this.fallbackSlot.removeAttribute('hidden') : this.fallbackSlot.setAttribute('hidden', '');
      }
    });
  }
}

customElements.define('clerk-protect', ClerkProtect);
</script>
