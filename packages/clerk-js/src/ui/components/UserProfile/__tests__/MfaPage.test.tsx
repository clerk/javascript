import type {
  BackupCodeResource,
  DeletedObjectResource,
  PhoneNumberResource,
  TOTPResource,
  VerificationJSON,
} from '@clerk/types';
import { describe, it } from '@jest/globals';
import { act, waitFor } from '@testing-library/react';

import { render, runFakeTimers, screen } from '../../../../testUtils';
import { CardStateProvider } from '../../../elements';
import { bindCreateFixtures } from '../../../utils/test/createFixtures';
import { MfaSection } from '../MfaSection';

const { createFixtures } = bindCreateFixtures('UserProfile');

const initConfig = createFixtures.config(f => {
  f.withBackupCode();
  f.withAuthenticatorApp();
  f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
  f.withUser({ phone_numbers: [{ phone_number: '+306911111111', id: 'id' }], two_factor_enabled: true });
});

describe('MfaPage', () => {
  it('renders the component', async () => {
    const { wrapper } = await createFixtures(initConfig);

    const { getByText } = render(<MfaSection />, { wrapper });
    getByText('Two-step verification');
    getByText('Add two-step verification');
  });

  describe('Add a verification', () => {
    it('lists all methods', async () => {
      const { wrapper } = await createFixtures(initConfig);

      const { getByText, userEvent, getByRole } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      getByText(/backup code/i);
      getByText(/authenticator app/i);
    });

    it('lists only sms and backup', async () => {
      const { wrapper } = await createFixtures(f => {
        f.withBackupCode();
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({ phone_numbers: [{ phone_number: '+306911111111', id: 'id' }], two_factor_enabled: true });
      });

      const { getByText, userEvent, getByRole, queryByText } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      expect(queryByText(/backup code/i)).toBeInTheDocument();
      expect(queryByText(/authenticator app/i)).not.toBeInTheDocument();
    });

    it('lists only sms and authenticator app', async () => {
      const { wrapper } = await createFixtures(f => {
        f.withAuthenticatorApp();
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({ phone_numbers: [{ phone_number: '+306911111111', id: 'id' }], two_factor_enabled: true });
      });

      const { getByText, userEvent, getByRole, queryByText } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      expect(queryByText(/backup code/i)).not.toBeInTheDocument();
      expect(queryByText(/authenticator app/i)).toBeInTheDocument();
    });

    it('lists only sms', async () => {
      const { wrapper } = await createFixtures(f => {
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({ phone_numbers: [{ phone_number: '+306911111111', id: 'id' }], two_factor_enabled: true });
      });

      const { getByText, userEvent, getByRole, queryByText } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      expect(queryByText(/backup code/i)).not.toBeInTheDocument();
      expect(queryByText(/authenticator app/i)).not.toBeInTheDocument();
    });

    it('Complete verification with phone_code and autogenerated backup codes', async () => {
      const { wrapper, fixtures } = await createFixtures(f => {
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({
          phone_numbers: [{ phone_number: '+306911111111', id: 'id', backup_codes: ['111111', '111111'] }],
          two_factor_enabled: true,
        });
        f.withBackupCode();
      });

      fixtures.clerk.user?.phoneNumbers[0].setReservedForSecondFactor.mockResolvedValue({} as PhoneNumberResource);
      const { getByText, userEvent, getByRole } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      await userEvent.click(getByRole('menuitem', { name: /sms code/i }));

      await waitFor(() => getByText(/Add SMS code verification/i));
      getByText(/Select an existing phone number to register for SMS code two-step verification or add a new one./i);

      await userEvent.click(getByRole('button', { name: /GR \+30 691 1111111/i }));
      expect(fixtures.clerk.user?.phoneNumbers[0].setReservedForSecondFactor).toHaveBeenCalledWith({
        reserved: true,
      });

      await waitFor(() => getByText(/SMS code verification enabled/i));
      getByText(
        /When signing in, you will need to enter a verification code sent to this phone number as an additional step./i,
      );
      getByText(
        /Save these backup codes and store them somewhere safe. If you lose access to your authentication device, you can use backup codes to sign in./i,
      );

      const backupCodesTitle = getByText(/backup codes/i, {
        selector: '[data-localization-key="userProfile.backupCodePage.title__codelist"]',
      });

      expect(backupCodesTitle).toBeInTheDocument();

      await userEvent.click(getByRole('button', { name: /finish/i }));
    });

    it('Complete verification with phone_code without autogenerated backup codes', async () => {
      const { wrapper } = await createFixtures(f => {
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({ phone_numbers: [{ phone_number: '+306911111111', id: 'id' }], two_factor_enabled: true });
      });

      const { getByText, userEvent, getByRole, queryByRole } = render(<MfaSection />, { wrapper });
      await waitFor(() => getByText('Two-step verification'));

      await act(async () => {
        await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
      });

      await waitFor(() => getByText(/sms code/i));
      await userEvent.click(getByRole('menuitem', { name: /sms code/i }));

      await waitFor(() => expect(queryByRole(/Add SMS code verification/i)).not.toBeInTheDocument());
    });

    it('Complete verification with authenticator app', async () => {
      const { wrapper, fixtures } = await createFixtures(f => {
        f.withUser({ two_factor_enabled: true });
        f.withAuthenticatorApp();
      });

      fixtures.clerk.user?.createTOTP.mockResolvedValue({} as TOTPResource);
      fixtures.clerk.user?.verifyTOTP.mockResolvedValue({} as TOTPResource);

      await runFakeTimers(async timers => {
        const { getByText, userEvent, getByRole } = render(<MfaSection />, { wrapper });
        await waitFor(() => getByText('Two-step verification'));

        await act(async () => {
          await userEvent.click(getByRole('button', { name: /Add two-step verification/i }));
        });

        await waitFor(() => getByText(/authenticator app/i));
        await userEvent.click(getByRole('menuitem', { name: /authenticator app/i }));

        await waitFor(() => expect(getByText(/Add authenticator application/i)).toBeInTheDocument());

        await waitFor(() => expect(getByRole('button', { name: /continue/i })).toBeInTheDocument());
        await userEvent.click(getByRole('button', { name: /continue/i }));

        await userEvent.type(screen.getByRole('textbox', { name: /Enter verification code/i }), '123456');
        timers.runOnlyPendingTimers();
        await waitFor(() => {
          expect(fixtures.clerk.user?.verifyTOTP).toHaveBeenCalled();
        });
        timers.runOnlyPendingTimers();
        await waitFor(() =>
          expect(
            getByText(
              /Two-step verification is now enabled. When signing in, you will need to enter a verification code from this authenticator as an additional step./i,
            ),
          ).toBeInTheDocument(),
        );
        await userEvent.click(getByRole('button', { name: /finish/i }));
      });
    });
  });

  describe('Regenerates', () => {
    it('Regenerates backup codes', async () => {
      const { wrapper, fixtures } = await createFixtures(f => {
        f.withBackupCode();
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({
          phone_numbers: [
            {
              phone_number: '+306911111111',
              id: 'id',
              reserved_for_second_factor: true,
              verification: { status: 'verified', strategy: 'phone_code' } as VerificationJSON,
            },
          ],
          backup_code_enabled: true,
          two_factor_enabled: true,
        });
      });

      fixtures.clerk.user?.createBackupCode.mockResolvedValue({} as BackupCodeResource);

      const { getByText, userEvent, getByRole } = render(
        <CardStateProvider>
          <MfaSection />
        </CardStateProvider>,
        { wrapper },
      );
      await waitFor(() => getByText('Two-step verification'));

      const itemButton = getByText(/backup codes/i)?.parentElement?.parentElement?.children[1];

      expect(itemButton).toBeDefined();
      await act(async () => {
        await userEvent.click(itemButton!);
      });
      await waitFor(() => getByText(/^regenerate$/i));
      await userEvent.click(getByText(/^regenerate$/i));

      getByText('Add backup code verification');
      await waitFor(() =>
        getByText(
          'Backup codes are now enabled. You can use one of these to sign in to your account, if you lose access to your authentication device. Each code can only be used once.',
        ),
      );
      expect(fixtures.clerk.user?.createBackupCode).toHaveBeenCalled();
      await userEvent.click(getByRole('button', { name: /^finish$/i }));
    });

    it.todo('Test the copy all/download/print buttons');
  });

  describe('Removes a verification', () => {
    it('Removes a phone verification', async () => {
      const { wrapper, fixtures } = await createFixtures(f => {
        f.withPhoneNumber({ second_factors: ['phone_code'], used_for_second_factor: true });
        f.withUser({
          phone_numbers: [
            {
              phone_number: '+306911111111',
              id: 'id',
              reserved_for_second_factor: true,
              verification: { status: 'verified', strategy: 'phone_code' } as VerificationJSON,
            },
          ],
          two_factor_enabled: true,
        });
      });

      fixtures.clerk.user?.phoneNumbers[0].setReservedForSecondFactor.mockResolvedValue({} as PhoneNumberResource);

      const { getByText, userEvent, getByRole } = render(
        <CardStateProvider>
          <MfaSection />
        </CardStateProvider>,
        { wrapper },
      );
      await waitFor(() => getByText('Two-step verification'));

      const itemButton = getByText(/\+30 691 1111111/i)?.parentElement?.parentElement?.parentElement?.children[1];

      expect(itemButton).toBeDefined();

      await act(async () => {
        await userEvent.click(itemButton!);
      });
      await waitFor(() => getByText(/^remove$/i));
      await userEvent.click(getByText(/^remove$/i));
      getByText(/remove two-step verification/i);
      getByText('Your account may not be as secure. Are you sure you want to continue?');

      await userEvent.click(getByRole('button', { name: /^remove$/i }));

      expect(fixtures.clerk.user?.phoneNumbers[0].setReservedForSecondFactor).toHaveBeenCalledWith({ reserved: false });
    });

    it('Removes a authenticator app verification', async () => {
      const { wrapper, fixtures } = await createFixtures(f => {
        f.withUser({ two_factor_enabled: true, totp_enabled: true });
        f.withAuthenticatorApp();
      });

      fixtures.clerk.user?.disableTOTP.mockResolvedValue({} as DeletedObjectResource);

      const { getByText, userEvent, getByRole } = render(
        <CardStateProvider>
          <MfaSection />
        </CardStateProvider>,
        { wrapper },
      );
      await waitFor(() => getByText('Two-step verification'));

      const itemButton = getByText(/Authenticator application/i)?.parentElement?.parentElement?.children[1];

      expect(itemButton).toBeDefined();

      await act(async () => {
        await userEvent.click(itemButton!);
      });
      await waitFor(() => getByText(/^remove$/i));
      await userEvent.click(getByText(/^remove$/i));
      getByText(/remove two-step verification/i);
      getByText('Your account may not be as secure. Are you sure you want to continue?');
      getByText('Verification codes from this authenticator will no longer be required when signing in.');

      await userEvent.click(getByRole('button', { name: /^remove$/i }));

      expect(fixtures.clerk.user?.disableTOTP).toHaveBeenCalled();
    });
  });
});
