// tsup.config.ts
import { defineConfig } from 'tsup';

// ../clerk-js/package.json
var version = '5.31.2';

// package.json
var name = '@clerk/elements';
var version2 = '0.18.5';

// tsup.config.ts
var tsup_config_default = defineConfig(overrideOptions => {
  const isProd = overrideOptions.env?.NODE_ENV === 'production';
  return {
    clean: true,
    define: {
      PACKAGE_NAME: `"${name}"`,
      PACKAGE_VERSION: `"${version2}"`,
      JS_PACKAGE_VERSION: `"${version}"`,
      __DEV__: `${!isProd}`,
    },
    dts: true,
    entry: {
      index: 'src/index.ts',
      'react/common/index': 'src/react/common/index.ts',
      'react/sign-in/index': 'src/react/sign-in/index.ts',
      'react/sign-up/index': 'src/react/sign-up/index.ts',
    },
    external: ['react', 'react-dom', 'next', '@statelyai/inspect'],
    format: ['cjs', 'esm'],
    minify: false,
    sourcemap: true,
  };
});
export { tsup_config_default as default };
//# sourceMappingURL=data:application/json;base64,
