name: API Breakage Detection

on:
  pull_request:
    paths:
      - 'packages/**'
      - 'tools/api-breakage-detector/**'
  push:
    branches:
      - main
    paths:
      - 'packages/**'

concurrency:
  group: api-breakage-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-api-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      # Setup Turborepo remote cache (optional)
      - name: Setup Turborepo Remote Cache
        if: env.TURBO_TEAM_ID && env.TURBO_TOKEN
        env:
          TURBO_TEAM_ID: ${{ vars.TURBO_TEAM_ID }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
        run: |
          npx turbo login --team=${{ env.TURBO_TEAM_ID }} --token=${{ env.TURBO_TOKEN }}

      # For PRs: Run API breakage detection with Turborepo
      - name: Run API breakage detection (PR)
        if: github.event_name == 'pull_request'
        id: api-check-pr
        run: |
          echo "üîç Running API breakage detection for PR..."
          
          # Generate current snapshots with Turborepo caching
          pnpm api:snapshot
          
          # Run comparison (this will use cached baseline if available)
          if pnpm api:check --no-version-check --format markdown --output api-changes-report.md; then
            echo "api_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "api_check_passed=false" >> $GITHUB_OUTPUT
          fi

      # For main branch: Update cached baselines
      - name: Update baseline cache (main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üì∏ Updating baseline snapshots cache..."
          
          # Generate and cache baseline snapshots
          pnpm api:snapshot --force
          
          # Store as artifacts for backup
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Backup baselines to artifacts (main branch)
      - name: Upload baseline snapshots (main branch)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: api-baseline-${{ env.COMMIT_SHA }}
          path: .api-snapshots/
          retention-days: 90

      # Comment on PR with results
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the generated report
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('api-changes-report.md', 'utf8');
            } catch (error) {
              reportContent = '‚ùå **Error**: Could not generate API changes report.\n\n' + error.message;
            }
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(
              comment => comment.user.login === 'github-actions[bot]' && 
                        comment.body.includes('API Changes Report')
            );
            
            const commentBody = `## üîç API Changes Report
            
            ${reportContent}
            
            ---
            <sub>ü§ñ This comment was automatically generated by the API Breakage Detector</sub>`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      # Set commit status
      - name: Set commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const apiCheckPassed = '${{ steps.api-check-pr.outputs.api_check_passed }}' === 'true';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: apiCheckPassed ? 'success' : 'failure',
              target_url: `${context.payload.pull_request.html_url}/checks`,
              description: apiCheckPassed ? 
                'No breaking API changes detected' : 
                'Breaking API changes detected - review required',
              context: 'api-breakage-detector'
            });

      # Upload debug artifacts
      - name: Upload API snapshots and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-debug-${{ github.run_id }}
          path: |
            .api-snapshots/
            api-changes-report.md
          retention-days: 7 