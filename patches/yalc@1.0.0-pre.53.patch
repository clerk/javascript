diff --git a/package.json b/package.json
index 930c1ca9954777dd1492a9e2373029d4644804cc..01e709cffb2a100bc6b0089edf91527d35b1b7fd 100644
--- a/package.json
+++ b/package.json
@@ -37,6 +37,7 @@
     "ignore": "^5.0.4",
     "ini": "^2.0.0",
     "npm-packlist": "^2.1.5",
+    "yaml": "2.6.1",
     "yargs": "^16.1.1"
   },
   "devDependencies": {
diff --git a/src/copy.js b/src/copy.js
index 3a6dca7b7a6ffde2527e7866f923c56f7d7061b8..9f84150a5d139562545c57965ad0f7488a8a050c 100644
--- a/src/copy.js
+++ b/src/copy.js
@@ -56,6 +56,7 @@ var fs_extra_1 = __importDefault(require("fs-extra"));
 var ignore_1 = __importDefault(require("ignore"));
 var npm_packlist_1 = __importDefault(require("npm-packlist"));
 var path_1 = require("path");
+var yaml_1 = require("yaml");
 var _1 = require(".");
 var _2 = require(".");
 var shortSignatureLength = 8;
@@ -120,6 +121,38 @@ var resolveWorkspaceDepVersion = function (version, pkgName, workingDir) {
         return '*';
     }
 };
+var resolveCatalogDepVersion = function (subCatalog, pkgName, workingDir) {
+    var _a;
+    var workspaceFilePath = path_1.join(workingDir, 'pnpm-workspace.yaml');
+    var workspaceContent = fs_extra_1.default.readFileSync(workspaceFilePath, 'utf8');
+    var workspaceYaml = yaml_1.parse(workspaceContent);
+    if (!workspaceYaml) {
+        console.warn('Could not find pnpm-workspace.yaml in the working directory.');
+    }
+    var packages = subCatalog && subCatalog.length > 0
+        ? ((_a = workspaceYaml === null || workspaceYaml === void 0 ? void 0 : workspaceYaml.catalogs) === null || _a === void 0 ? void 0 : _a[subCatalog]) || []
+        : (workspaceYaml === null || workspaceYaml === void 0 ? void 0 : workspaceYaml.catalog) || [];
+    try {
+        for (var _i = 0, packages_1 = packages; _i < packages_1.length; _i++) {
+            var pkgPattern = packages_1[_i];
+            var potentialPath = path_1.join(workingDir, pkgPattern, pkgName, 'package.json');
+            try {
+                var resolvedPackage = require.resolve(potentialPath);
+                var pkgManifest = require(resolvedPackage);
+                return pkgManifest.version || '*';
+            }
+            catch (_b) {
+                continue; // Try the next pattern
+            }
+        }
+        console.warn("Could not find a package matching " + pkgName + " in catalog.");
+        return '*';
+    }
+    catch (e) {
+        console.error('Error reading pnpm-workspace.yaml:', e);
+        return '*';
+    }
+};
 var resolveWorkspaces = function (pkg, workingDir) {
     var resolveDeps = function (deps) {
         return deps
@@ -130,6 +163,12 @@ var resolveWorkspaces = function (pkg, workingDir) {
                     console.log("Resolving workspace package " + depPkgName + " version ==> " + resolved);
                     return resolved;
                 }
+                if (val.startsWith('catalog:')) {
+                    var version = val.split(':')[1];
+                    var resolved = resolveCatalogDepVersion(version, depPkgName, workingDir);
+                    console.log("Resolving catalog package " + depPkgName + " version ==> " + resolved);
+                    return resolved;
+                }
                 return val;
             })
             : deps;
@@ -160,9 +199,9 @@ exports.copyPackageToStore = function (options) { return __awaiter(void 0, void
             case 2:
                 npmList = _c.sent();
                 filesToCopy = npmList.filter(function (f) { return !ignoreRule.ignores(f); });
-                if (options.files) {
+                if (options.content) {
                     console.info('Files included in published content:');
-                    filesToCopy.forEach(function (f) {
+                    filesToCopy.sort().forEach(function (f) {
                         console.log("- " + f);
                     });
                     console.info("Total " + filesToCopy.length + " files.");
